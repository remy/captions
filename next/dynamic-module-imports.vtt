WEBVTT

1
00:00:02.970 --> 00:00:06.300
<v ->Next ships with some of the latest</v>

2
00:00:06.300 --> 00:00:10.067
kind of features of ES6 and 7 turned-on-by-lethal.

3
00:00:12.080 --> 00:00:17.080
This means that, in particular, we have dynamic imports.

4
00:00:17.520 --> 00:00:20.010
So we have these import statements up at the top and,

5
00:00:20.010 --> 00:00:22.590
but we can also, inside of our code,

6
00:00:22.590 --> 00:00:27.590
do imports in the module, let's say,

7
00:00:28.180 --> 00:00:29.563
this codemirror thing,

8
00:00:32.647 --> 00:00:36.663
.then or default,

9
00:00:37.570 --> 00:00:38.733
It's defaults? Default.

10
00:00:39.940 --> 00:00:42.483
And we actually can receive the module.

11
00:00:43.440 --> 00:00:45.690
So we could even have it in kind of an await.

12
00:00:47.650 --> 00:00:49.663
Foo, so, async,

13
00:00:51.177 --> 00:00:52.890
foo, function,

14
00:00:52.890 --> 00:00:57.417
and it will do const module = await import,

15
00:00:58.260 --> 00:01:00.660
and then something with the module.

16
00:01:00.660 --> 00:01:02.230
Okay, so this allows us,

17
00:01:02.230 --> 00:01:05.380
because we're doing a lazy,

18
00:01:05.380 --> 00:01:08.000
effectively lazy import with the module,

19
00:01:08.000 --> 00:01:10.170
the way that Next kind of rearranges all its code

20
00:01:10.170 --> 00:01:13.120
is it will treat that as a completely separate piece

21
00:01:13.120 --> 00:01:15.820
that it will code split out of your main bundle.

22
00:01:15.820 --> 00:01:18.790
So if it's something you don't need to run on server side,

23
00:01:18.790 --> 00:01:22.080
or something that can be loading on,

24
00:01:22.080 --> 00:01:24.090
when the user demands it,

25
00:01:24.090 --> 00:01:29.090
this is a really good candidate for using dynamic imports.

26
00:01:29.260 --> 00:01:32.530
So, in this example, we've got this notes box,

27
00:01:32.530 --> 00:01:35.975
and I'm running codemirror in it.

28
00:01:35.975 --> 00:01:38.870
There's a piece of code to get the syntax highlighted

29
00:01:38.870 --> 00:01:42.253
that only will run, will only run in the browser.

30
00:01:43.140 --> 00:01:48.030
So my argument is really like the whole notes section,

31
00:01:48.030 --> 00:01:51.310
I'm not gonna even do the rendering on the server side.

32
00:01:51.310 --> 00:01:53.690
I wanna show a loading block,

33
00:01:53.690 --> 00:01:56.960
and then watch it load in the notes section.

34
00:01:56.960 --> 00:01:59.250
So that will be dynamically loaded in,

35
00:01:59.250 --> 00:02:01.250
and actually completely split out.

36
00:02:01.250 --> 00:02:05.600
So, I'm gonna lazy load this Notes,

37
00:02:05.600 --> 00:02:07.620
but when it's loading, I wanna show

38
00:02:07.620 --> 00:02:10.290
kind of a, just a piece of text saying loading.

39
00:02:10.290 --> 00:02:13.170
I could also kind of use those,

40
00:02:13.170 --> 00:02:14.270
I think they're called rails,

41
00:02:14.270 --> 00:02:15.960
where there's just kind of like bars to show

42
00:02:15.960 --> 00:02:18.940
that it's loading in the client side.

43
00:02:18.940 --> 00:02:23.940
And Next has this dynamic import library that it provides.

44
00:02:26.600 --> 00:02:28.160
So there's a couple of libraries a bit like this,

45
00:02:28.160 --> 00:02:31.140
but this is the one that we're gonna use.

46
00:02:31.140 --> 00:02:33.140
And the idea is you can

47
00:02:35.050 --> 00:02:37.093
basically load the module dynamic,

48
00:02:38.440 --> 00:02:43.430
and then you give it your promise to load the actual module,

49
00:02:43.430 --> 00:02:46.940
and when it renders, and if it hasn't got it yet,

50
00:02:46.940 --> 00:02:50.270
it should render kind of a holding state.

51
00:02:50.270 --> 00:02:52.320
So this is an example of what it would show

52
00:02:52.320 --> 00:02:53.453
once it's loading.

53
00:02:54.310 --> 00:02:56.830
So here, it's loading this component too,

54
00:02:56.830 --> 00:02:58.700
and whilst it's loading that component,

55
00:02:58.700 --> 00:03:01.960
and actually making the request for the bundle for hello2,

56
00:03:01.960 --> 00:03:05.550
it'll show this ellipsis in this section.

57
00:03:05.550 --> 00:03:06.620
So that's what we're gonna do.

58
00:03:06.620 --> 00:03:11.140
Instead of loading the notes component right away,

59
00:03:11.140 --> 00:03:14.300
we're gonna use this dynamic method,

60
00:03:14.300 --> 00:03:17.090
and I'm gonna show a kind of loading ellipsis,

61
00:03:17.090 --> 00:03:19.540
and you could put any animation in there if you wanted to,

62
00:03:19.540 --> 00:03:23.430
and then once it's loaded, it'll run on the page.

63
00:03:23.430 --> 00:03:25.520
But in addition, I'm gonna make use of this

64
00:03:25.520 --> 00:03:27.460
server side: false.

65
00:03:27.460 --> 00:03:29.160
So this will prevent any of that code

66
00:03:29.160 --> 00:03:31.710
running on the server side at all.

67
00:03:31.710 --> 00:03:35.040
So that will mean that I can refactor this code

68
00:03:35.040 --> 00:03:37.120
a little bit more so it's a bit more readable,

69
00:03:37.120 --> 00:03:40.120
and put the require in there and don't worry about the mode,

70
00:03:41.470 --> 00:03:44.603
and this will only run in the client side.

71
00:03:47.170 --> 00:03:49.070
Now this is just,

72
00:03:49.070 --> 00:03:50.730
the reason this only runs in the client side

73
00:03:50.730 --> 00:03:53.993
is just purely for this example.

74
00:03:58.424 --> 00:04:00.924
Const Notes = whoa, dash.

75
00:04:03.950 --> 00:04:06.090
In a real production piece of code,

76
00:04:06.090 --> 00:04:08.610
I might not wanna just have this running on the client side.

77
00:04:08.610 --> 00:04:13.610
Maybe I'd want it to render text, so it can be spidered.

78
00:04:13.626 --> 00:04:15.250
But then on the other hand, I guess,

79
00:04:15.250 --> 00:04:16.670
the user has to be signed in to be able to read it,

80
00:04:16.670 --> 00:04:18.490
because of private text, so

81
00:04:18.490 --> 00:04:20.180
there's always these kind of considerations

82
00:04:20.180 --> 00:04:22.550
you need to think about.

83
00:04:22.550 --> 00:04:24.520
Okay, so this Notes is gonna change.

84
00:04:24.520 --> 00:04:27.053
We are gonna change it to a dynamic import.

85
00:04:28.110 --> 00:04:31.780
So up here, I'm gonna do import dynamic from dynamic,

86
00:04:31.780 --> 00:04:32.783
and I'm gonna do,

87
00:04:34.004 --> 00:04:36.930
I'm gonna rename this component to be,

88
00:04:36.930 --> 00:04:38.760
oh in fact, might not even have it there,

89
00:04:38.760 --> 00:04:43.570
I'm gonna do const Notes = dynamic,

90
00:04:43.570 --> 00:04:46.953
and that's gonna be import...that.

91
00:04:48.840 --> 00:04:51.683
Okay, and I'm gonna do, what is it, loading?

92
00:04:52.570 --> 00:04:53.817
And I'm gonna do...this.

93
00:05:02.800 --> 00:05:05.503
And we're also gonna say ssr: false,

94
00:05:07.860 --> 00:05:09.810
words overlays.

95
00:05:09.810 --> 00:05:12.060
So look at how we're looking, right, so...

96
00:05:14.940 --> 00:05:16.903
Check we're passing in.

97
00:05:18.120 --> 00:05:18.953
Import.

98
00:05:20.660 --> 00:05:22.223
Just double check the syntax.

99
00:05:27.380 --> 00:05:29.403
Ah, this, no, looks okay.

100
00:05:37.830 --> 00:05:39.683
Yep, looks all right to me.

101
00:05:45.580 --> 00:05:49.853
And with server side off, same thing.

102
00:05:56.040 --> 00:05:57.710
Ah, so we've got loaded of undefined.

103
00:05:57.710 --> 00:05:58.950
Where is this?

104
00:05:58.950 --> 00:06:01.610
Cannot read property, loaded of undefined.

105
00:06:01.610 --> 00:06:04.030
So, ah, whoops.

106
00:06:04.030 --> 00:06:06.873
That's an arbitrary, random blob there.

107
00:06:10.460 --> 00:06:11.760
Okay, props.

108
00:06:11.760 --> 00:06:13.670
So props aren't being passed down.

109
00:06:13.670 --> 00:06:15.420
So this is interesting is it's not,

110
00:06:16.490 --> 00:06:20.680
it's not passing the props into our component.

111
00:06:20.680 --> 00:06:21.513
And there is a fix for this,

112
00:06:21.513 --> 00:06:23.733
but I'm just gonna disable it for the time being.

113
00:06:27.498 --> 00:06:31.060
(groans) All right, hang on.

114
00:06:31.060 --> 00:06:32.280
I think it is reading the props,

115
00:06:32.280 --> 00:06:34.930
just I'm not capturing the props.

116
00:06:34.930 --> 00:06:35.763
There we go.

117
00:06:38.200 --> 00:06:41.093
And that's, let's take this component.

118
00:06:42.530 --> 00:06:46.010
There we go, that's looking okay,

119
00:06:46.010 --> 00:06:50.440
except for the fact that CSS hasn't actually loaded.

120
00:06:50.440 --> 00:06:51.750
Brilliant.

121
00:06:51.750 --> 00:06:53.323
So it looks like we need to load,

122
00:06:54.670 --> 00:06:57.360
this isn't getting inserted into our Next application,

123
00:06:57.360 --> 00:06:59.050
because it's being lazy loaded,

124
00:06:59.050 --> 00:07:01.884
and therefore not in the style sheet.

125
00:07:01.884 --> 00:07:05.490
So if we have a look here,

126
00:07:05.490 --> 00:07:09.290
static, this style sheet doesn't contain

127
00:07:09.290 --> 00:07:13.840
the CSS for this because it's being loaded dynamically.

128
00:07:13.840 --> 00:07:16.550
So we would have to think about how this is loaded,

129
00:07:16.550 --> 00:07:19.710
or we could load it as part of this,

130
00:07:19.710 --> 00:07:20.953
which is what I'm gonna show you

131
00:07:20.953 --> 00:07:23.953
so that you can see how to do multiple components in one go.

132
00:07:25.190 --> 00:07:28.500
It looks like the URL is being passed down correctly,

133
00:07:28.500 --> 00:07:30.680
and that is codemirror, but there's no styles.

134
00:07:30.680 --> 00:07:34.110
And just to, just gonna pop the styles into here,

135
00:07:34.110 --> 00:07:36.963
just for the time being, to show that it works.

136
00:07:55.810 --> 00:07:58.120
Okay, sorry for a lot of flashing there.

137
00:07:58.120 --> 00:07:59.620
So you can see it's saying loading notes,

138
00:07:59.620 --> 00:08:00.670
and then it loads it.

139
00:08:01.920 --> 00:08:03.840
And you can imagine there being

140
00:08:03.840 --> 00:08:05.900
some extra request going on

141
00:08:05.900 --> 00:08:09.000
to get all the user notes from the API.

142
00:08:09.000 --> 00:08:14.000
But if we wanna load multiple packages, we can do this.

143
00:08:15.370 --> 00:08:19.360
So on this page is syntax for multiple at once.

144
00:08:19.360 --> 00:08:23.440
We can do modules, and we can define the render function,

145
00:08:23.440 --> 00:08:25.990
and that's exactly what we're gonna do.

146
00:08:25.990 --> 00:08:27.993
So we're gonna do modules,

147
00:08:31.930 --> 00:08:34.800
and we're gonna do render,

148
00:08:34.800 --> 00:08:35.800
though I'm not sure,

149
00:08:40.490 --> 00:08:42.633
and const components = Notes.

150
00:08:51.380 --> 00:08:53.797
And this'll be, I think it's,

151
00:08:56.510 --> 00:08:58.403
just double check, syntax, got,

152
00:09:00.190 --> 00:09:04.593
props comes in, and then the individual modules come in.

153
00:09:07.200 --> 00:09:11.220
So this'll be Notes, and we don't,

154
00:09:11.220 --> 00:09:13.923
we're gonna lazy load these two in as well.

155
00:09:16.170 --> 00:09:18.257
Just a shame, so css1: import,

156
00:09:26.710 --> 00:09:29.673
css2: import.

157
00:09:39.510 --> 00:09:42.010
Think we might just take a look at what's in here.

158
00:09:48.160 --> 00:09:50.723
So fix that, so return components.

159
00:10:08.270 --> 00:10:13.100
Okay, so the rule, CSS has come back and, when we load it,

160
00:10:13.100 --> 00:10:15.340
so we're gonna have to pop that into

161
00:10:18.170 --> 00:10:19.003
an element.

162
00:10:19.003 --> 00:10:19.836
So I'm gonna,

163
00:10:21.590 --> 00:10:24.540
really, I would put this kind of all into its separate file,

164
00:10:24.540 --> 00:10:27.860
but I'm gonna bring in next/head,

165
00:10:27.860 --> 00:10:32.303
and I'm gonna put the CSS into a head component.

166
00:10:34.950 --> 00:10:39.950
So, Fragment, Head, then I'll put the style sheet in there.

167
00:10:45.647 --> 00:10:48.910
And I'm gonna put the CSS directly into there,

168
00:10:48.910 --> 00:10:52.360
and then we're gonna have our notes components,

169
00:10:52.360 --> 00:10:56.253
and we're gonna spread props onto it.

170
00:10:59.510 --> 00:11:03.240
Okay, and this is

171
00:11:04.190 --> 00:11:06.380
an array of css1 and 2,

172
00:11:06.380 --> 00:11:11.380
so let's grab the css1 and 2, css1, css2,

173
00:11:11.520 --> 00:11:14.840
and we're gonna put the CSS directly into here as text.

174
00:11:25.747 --> 00:11:27.997
So css1, can I do toString?

175
00:11:29.523 --> 00:11:30.973
I'll do toString.

176
00:11:32.107 --> 00:11:34.243
And then I'm gonna do css2.toString,

177
00:11:38.470 --> 00:11:40.313
miss the brace.

178
00:11:44.813 --> 00:11:46.763
So looking at how that works out, cool.

179
00:11:53.670 --> 00:11:57.480
Okay, so that is working.

180
00:11:57.480 --> 00:12:01.180
And what we should see is

181
00:12:02.070 --> 00:12:05.030
these are separate blobs.

182
00:12:05.030 --> 00:12:07.203
So if we just look for JavaScript,

183
00:12:11.588 --> 00:12:12.810
I think that's everything.

184
00:12:12.810 --> 00:12:13.643
So we request,

185
00:12:13.643 --> 00:12:16.840
and then we can these subsequent requests here.

186
00:12:16.840 --> 00:12:18.340
Just makes it a little bit bigger.

187
00:12:18.340 --> 00:12:21.560
You can see this is three files.

188
00:12:21.560 --> 00:12:24.210
First one is the codemirror.

189
00:12:24.210 --> 00:12:25.960
Let's get rid of our cache as well.

190
00:12:27.840 --> 00:12:29.172
So this is codemirror,

191
00:12:29.172 --> 00:12:31.030
ah, well, no, I think that's codemirror,

192
00:12:31.030 --> 00:12:33.280
that one, 600 bytes.

193
00:12:33.280 --> 00:12:35.210
And then we've got this 25 bytes.

194
00:12:35.210 --> 00:12:37.377
I'd be willing to bet that's the CSS for codemirror,

195
00:12:37.377 --> 00:12:40.820
and this one is the, our notes CSS.

196
00:12:40.820 --> 00:12:43.580
In fact, there's the file name, just there, you can see it.

197
00:12:43.580 --> 00:12:48.580
So that is how you can use dynamic imports in Next.

198
00:12:49.630 --> 00:12:51.670
So it's fairly flexible.

199
00:12:51.670 --> 00:12:56.260
You can go from just a promise-based import to

200
00:12:57.816 --> 00:12:59.680
this kind of syntax,

201
00:12:59.680 --> 00:13:01.650
which is a lot easier to kind of write out,

202
00:13:01.650 --> 00:13:05.170
all the way down to a much more complex,

203
00:13:05.170 --> 00:13:09.430
well, a little bit more complex model,

204
00:13:09.430 --> 00:13:12.330
and specifically, you can control whether it's rendered

205
00:13:12.330 --> 00:13:14.380
on the server side or on the client side.

