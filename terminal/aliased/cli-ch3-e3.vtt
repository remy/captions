WEBVTT

1
00:00:00.840 --> 00:00:03.024
<v ->Okay, so picking up from where we left off</v>

2
00:00:03.024 --> 00:00:05.184
with the cat command,

3
00:00:05.184 --> 00:00:08.335
the next command I wanna show you is called grep.

4
00:00:08.335 --> 00:00:11.752
So it's used for string searches, really.

5
00:00:13.400 --> 00:00:14.637
It's extremely powerful.

6
00:00:14.637 --> 00:00:16.686
I use it a lot of the time,

7
00:00:16.686 --> 00:00:20.186
and it helps philtre down lines and matches

8
00:00:22.280 --> 00:00:24.179
what you're searching for.

9
00:00:24.179 --> 00:00:26.596
If I cut out that file again,

10
00:00:27.987 --> 00:00:32.781
I can pipe to grep and it will take the output from cat

11
00:00:32.781 --> 00:00:34.411
and use it to input to grep,

12
00:00:34.411 --> 00:00:36.448
and we can just search for

13
00:00:36.448 --> 00:00:39.781
all the lines that contain the word get.

14
00:00:41.855 --> 00:00:45.451
So, this'll print out a whole bunch of lines.

15
00:00:45.451 --> 00:00:47.361
Now, you might be able to tell,

16
00:00:47.361 --> 00:00:48.748
but some of these lines are wrapping.

17
00:00:48.748 --> 00:00:51.820
I can tell by just resizing here.

18
00:00:51.820 --> 00:00:52.950
But it's not every clear,

19
00:00:52.950 --> 00:00:55.598
so I can see that's getting out of bed,

20
00:00:55.598 --> 00:00:58.348
my aim was to get, then it says I.

21
00:00:58.348 --> 00:01:01.198
And grep and has a whole bunch of extra little arguments

22
00:01:01.198 --> 00:01:03.738
that make grep a little more powerful.

23
00:01:03.738 --> 00:01:07.118
One of them is the line number that match, for instance.

24
00:01:07.118 --> 00:01:09.118
So, I can use a grep -n,

25
00:01:12.660 --> 00:01:14.179
and it'll give me the line number

26
00:01:14.179 --> 00:01:16.429
that it found the term get,

27
00:01:18.821 --> 00:01:21.488
so I can see line 125, line 135,

28
00:01:22.765 --> 00:01:27.696
and that is one entire line here, and then 149, 162,

29
00:01:27.696 --> 00:01:28.529
and so on.

30
00:01:29.432 --> 00:01:34.136
We can also, instead of actually show those lines,

31
00:01:34.136 --> 00:01:35.449
we can count those lines.

32
00:01:35.449 --> 00:01:38.376
Again, something I use quite a lot actually.

33
00:01:38.376 --> 00:01:41.002
So count the number of occurrences of the word get

34
00:01:41.002 --> 00:01:42.669
in that file, seven.

35
00:01:44.569 --> 00:01:49.072
Grep can also take a file name as an argument,

36
00:01:49.072 --> 00:01:50.480
so we can do the same thing,

37
00:01:50.480 --> 00:01:54.039
but just put the file name as the argument,

38
00:01:54.039 --> 00:01:56.372
and it'll do the same thing.

39
00:02:00.702 --> 00:02:03.190
There's a whole bunch of extra things that grep can do.

40
00:02:03.190 --> 00:02:06.468
It's worth having a look at the manual for it.

41
00:02:06.468 --> 00:02:11.180
So man flies up the ReadMe basically for the grep command.

42
00:02:11.180 --> 00:02:14.876
I'm a super fan of the manuals because I find

43
00:02:14.876 --> 00:02:18.918
it a little tricky to navigate and so on.

44
00:02:18.918 --> 00:02:21.256
You can just as easily fire up Google

45
00:02:21.256 --> 00:02:24.391
and search for the, I tend to search UNIX grep,

46
00:02:24.391 --> 00:02:28.099
and it will give you what you're looking for.

47
00:02:28.099 --> 00:02:30.849
A couple of extra things, actually bonus bits,

48
00:02:30.849 --> 00:02:35.151
the after and before, I find is quite useful sometimes

49
00:02:35.151 --> 00:02:37.608
when you're looking for a bit of context.

50
00:02:37.608 --> 00:02:39.143
So we go back to this.

51
00:02:39.143 --> 00:02:41.560
If we grep with line numbers,

52
00:02:42.468 --> 00:02:44.385
we'll do -A 2 and -B 2.

53
00:02:46.812 --> 00:02:48.629
What we're getting is the two lines before

54
00:02:48.629 --> 00:02:50.414
and the two lines after,

55
00:02:50.414 --> 00:02:53.997
and the line numbers for where the word get

56
00:02:53.997 --> 00:02:56.664
appears in this stream of input.

57
00:02:59.546 --> 00:03:02.261
So you can see now, have a bit of context

58
00:03:02.261 --> 00:03:03.094
of what I'm looking at.

59
00:03:03.094 --> 00:03:06.036
So you can see, here is the match,

60
00:03:06.036 --> 00:03:07.605
and there's the two lines before

61
00:03:07.605 --> 00:03:09.749
and the two lines after.

62
00:03:09.749 --> 00:03:11.594
So I can see there's some paragraphs

63
00:03:11.594 --> 00:03:13.927
about my body fat and so on.

64
00:03:19.406 --> 00:03:20.288
It's pretty useful,

65
00:03:20.288 --> 00:03:24.034
definitely worth having a look at what grep can actually do.

66
00:03:24.034 --> 00:03:26.483
But even if you just use it for basic things,

67
00:03:26.483 --> 00:03:30.049
like accounting, it's definitely worth using.

68
00:03:30.049 --> 00:03:32.171
It's worth also showing you

69
00:03:32.171 --> 00:03:35.614
that you can use some regular expressions.

70
00:03:35.614 --> 00:03:38.031
So, let's go back to catting.

71
00:03:39.123 --> 00:03:42.815
What we can look for is the hash symbol.

72
00:03:42.815 --> 00:03:44.166
Because I was mark down,

73
00:03:44.166 --> 00:03:47.853
this will match any heading in mark down.

74
00:03:47.853 --> 00:03:48.999
Oops.

75
00:03:48.999 --> 00:03:51.916
Grep, oh, let's put that in quotes.

76
00:03:52.909 --> 00:03:53.829
The reason I have to put that in quotes

77
00:03:53.829 --> 00:03:57.329
is because a hash symbol is also a comment

78
00:03:59.179 --> 00:04:00.113
on the UNIX command,

79
00:04:00.113 --> 00:04:03.797
so it just treated that as grep without any arguments.

80
00:04:03.797 --> 00:04:06.815
So we're searching for the string hash.

81
00:04:06.815 --> 00:04:11.141
So, like I was saying, because I've written it in mark down,

82
00:04:11.141 --> 00:04:12.690
it should match all the headings,

83
00:04:12.690 --> 00:04:14.722
but it's also matched this one,

84
00:04:14.722 --> 00:04:17.718
which has got just a sentence with a hash in the middle,

85
00:04:17.718 --> 00:04:19.390
so we'll just have a quick look,

86
00:04:19.390 --> 00:04:20.940
oh no, not -c, -n.

87
00:04:20.940 --> 00:04:24.575
Line number, it's just matched some arbitrary sentence,

88
00:04:24.575 --> 00:04:26.165
not interested in that.

89
00:04:26.165 --> 00:04:28.622
What we are interested in is if the hash

90
00:04:28.622 --> 00:04:31.028
is at the beginning of the line.

91
00:04:31.028 --> 00:04:34.811
And to do that, we do a little caret.

92
00:04:34.811 --> 00:04:37.977
So if you're, again, familiar with regular expressions,

93
00:04:37.977 --> 00:04:41.573
you'll recognise this as the caret means starts with,

94
00:04:41.573 --> 00:04:43.149
and then the hash symbol.

95
00:04:43.149 --> 00:04:45.899
And now, we only get the headings

96
00:04:47.569 --> 00:04:50.648
that start with the hash symbol.

97
00:04:50.648 --> 00:04:54.967
So it has some regular expression supports.

98
00:04:54.967 --> 00:04:58.251
I tend to kind of use this in a limited fashion.

99
00:04:58.251 --> 00:05:00.982
There's also an extension version of grep

100
00:05:00.982 --> 00:05:02.605
which is called egrep.

101
00:05:02.605 --> 00:05:04.994
You might have spotted it in the manual,

102
00:05:04.994 --> 00:05:07.945
right at the top, grep, egrep.

103
00:05:07.945 --> 00:05:11.069
These other ones, personally I've never used.

104
00:05:11.069 --> 00:05:14.074
Or zgrep I've used, I think.

105
00:05:14.074 --> 00:05:16.807
But egrep is kinda of regular expression

106
00:05:16.807 --> 00:05:19.712
version of grep, but there is, like we've already seen,

107
00:05:19.712 --> 00:05:23.277
some basic support for regular expressions.

108
00:05:23.277 --> 00:05:26.346
And if you want to brush up

109
00:05:26.346 --> 00:05:28.100
on your regular expressions a little bit,

110
00:05:28.100 --> 00:05:31.933
highly recommend regexp101.com, I think it is.

111
00:05:33.499 --> 00:05:36.416
Yeah, regexp101.com, very good site

112
00:05:37.547 --> 00:05:40.464
for practising  regular expressions.

113
00:05:41.491 --> 00:05:44.991
What you can do is, you can take this file

114
00:05:47.093 --> 00:05:50.722
and just stick it into here for testing.

115
00:05:50.722 --> 00:05:54.072
I tend to go with just java script.

116
00:05:54.072 --> 00:05:58.239
Or, if you fancy it, you can do pbcopy, paste board copy.

117
00:05:59.655 --> 00:06:03.568
That will pipe that into copy/paste,

118
00:06:03.568 --> 00:06:07.368
and then we can test our regular expression here.

119
00:06:07.368 --> 00:06:10.201
Then we go till we find one match.

120
00:06:14.535 --> 00:06:15.428
Whatever.

121
00:06:15.428 --> 00:06:18.583
Yeah, so there's a good place to practise

122
00:06:18.583 --> 00:06:22.191
your regular expressions, if you wanna play around.

